@namespace NinjaDesk.Components
@inject HttpClient HttpClient
@inherits ComponentBase

<div class="desktop">
    <div class="windows-area">
        @foreach (var app in _openedApps)
        {
            <ApplicationWindow
                Application="@app.Application"
                Left="@app.Left"
                Top="@app.Top"
                Width="@app.Width"
                Height="@app.Height"
                ZIndex="@app.ZIndex"
                OnFocus="e => FocusApplication(app)"
                OnMove="e => MoveApplication(app, e.Left, e.Top, e.Width, e.Height)"
                OnClose="e => CloseApplication(app)" />
        }
    </div>
    <Dock Apps="_apps" OnOpen="app => Open(app)" />
</div>

@code
{
    private record ApplicationWindowVM
    {
        public required Application Application { get; set; }
        public int Left { get; set; }
        public int Top { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }
        public int ZIndex { get; set; }
    }

    private IEnumerable<Application>? _apps;

    private List<ApplicationWindowVM> _openedApps = new List<ApplicationWindowVM>();

    protected override async Task OnInitializedAsync()
    {
        _apps = await GetApplicationsAsync();
    }

    private void Open(Application app)
    {
        var openedApp = _openedApps.FirstOrDefault(a => a.Application == app);
        if (openedApp == null)
        {
            var topApp = _openedApps.FirstOrDefault(a => a.ZIndex == _openedApps.Count);
            var (left, top) = topApp == null ? (50, 50) : (topApp.Left + 50, topApp.Top + 50);
            _openedApps.Add(new ApplicationWindowVM() { Application = app, Left = left, Top = top, Width = 600, Height = 500, ZIndex = _openedApps.Count + 1 });
        }
        else
        {
            FocusApplication(openedApp);
        }
    }

    private void FocusApplication(ApplicationWindowVM app)
    {
        if (app.ZIndex == _openedApps.Count)
        {
            return;
        }

        foreach (var a in _openedApps)
        {
            if (a.ZIndex > app.ZIndex)
            {
                --a.ZIndex;
            }
        }
        app.ZIndex = _openedApps.Count;
    }

    private void MoveApplication(ApplicationWindowVM app, int left, int top, int width, int height)
    {
        app.Left = left;
        app.Top = top;
        app.Width = width;
        app.Height = height;
    }

    private void CloseApplication(ApplicationWindowVM app)
    {
        _openedApps.Remove(app);
    }

    private async Task<IEnumerable<Application>> GetApplicationsAsync()
    {
        var appsBaseAddress = new Uri(HttpClient.BaseAddress ?? new Uri("/"), "apps/");
        var apps = new List<Application>();
        var appAddress = await HttpClient.GetFromJsonAsync<string[]>(new Uri(appsBaseAddress, "apps.json"));
        if (appAddress != null)
        {
            foreach (var address in appAddress)
            {
                var addr = ToAbsoluteUri(address, appsBaseAddress);
                var app = await HttpClient.GetFromJsonAsync<Application>(addr);
                if (app != null)
                {
                    var appBaseUri = new Uri(new Uri(addr), ".");
                    app.Icon = ToAbsoluteUri(app.Icon, appBaseUri);
                    app.Main = ToAbsoluteUri(app.Main, appBaseUri);
                    apps.Add(app);
                }
            }
        }
        return apps;
    }

    private string ToAbsoluteUri(string uri, Uri baseUri)
    {
        var u = new Uri(uri, UriKind.RelativeOrAbsolute);
        return u.IsAbsoluteUri ? u.ToString() : new Uri(baseUri, uri).ToString();
    }
}